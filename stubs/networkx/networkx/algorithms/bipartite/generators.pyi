from networkx.classes.graph import Graph, _Node
from networkx.utils.backends import _dispatchable
from numpy.random import RandomState

@_dispatchable
def complete_bipartite_graph(n1, n2, create_using: Graph[_Node] = None): ...
@_dispatchable
def configuration_model(
    aseq: list, bseq: list, create_using: Graph[_Node] | None = None, seed: int | RandomState | None = None
): ...
@_dispatchable
def havel_hakimi_graph(aseq: list, bseq: list, create_using: Graph[_Node] | None = None): ...
@_dispatchable
def reverse_havel_hakimi_graph(aseq: list, bseq: list, create_using: Graph[_Node] | None = None): ...
@_dispatchable
def alternating_havel_hakimi_graph(aseq: list, bseq: list, create_using: Graph[_Node] | None = None): ...
@_dispatchable
def preferential_attachment_graph(
    aseq: list, p: float, create_using: Graph[_Node] | None = None, seed: int | RandomState | None = None
): ...
@_dispatchable
def random_graph(n: int, m: int, p: float, seed: int | RandomState | None = None, directed: bool | None = False): ...
@_dispatchable
def gnmk_random_graph(n: int, m: int, k: int, seed: int | RandomState | None = None, directed: bool | None = False): ...
